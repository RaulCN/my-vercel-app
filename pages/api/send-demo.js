import twilio from 'twilio';

let userGoals = {}; // Simula√ß√£o de banco de dados tempor√°rio

export default async function handler(req, res) {
  console.log('Requisi√ß√£o recebida em /api/send-demo');
  
  if (req.method !== 'POST') {
    console.log(`M√©todo incorreto: ${req.method}`);
    return res.status(405).json({ message: 'M√©todo n√£o permitido' });
  }

  try {
    console.log('Corpo da requisi√ß√£o:', JSON.stringify(req.body));
    
    const { phoneNumber, expenses, commissions, targetIncome } = req.body;

    if (!phoneNumber) {
      console.log('Erro: N√∫mero de telefone n√£o fornecido');
      return res.status(400).json({ message: 'N√∫mero de WhatsApp √© obrigat√≥rio' });
    }

    // Salvar metas no banco de dados tempor√°rio
    userGoals[phoneNumber] = { expenses, commissions, targetIncome };

    // Formata√ß√£o do n√∫mero para o formato internacional
    let formattedNumber = phoneNumber.replace(/\D/g, '');
    if (!formattedNumber.startsWith('55') && formattedNumber.length === 11) {
      formattedNumber = `55${formattedNumber}`;
    }

    if (formattedNumber.length < 12 || formattedNumber.length > 13) {
      return res.status(400).json({ 
        message: 'Formato de n√∫mero inv√°lido. Use o formato +55DDDXXXXXXXX',
        details: `N√∫mero formatado: ${formattedNumber}`
      });
    }

    // Verifica√ß√£o de vari√°veis de ambiente
    const accountSid = process.env.TWILIO_ACCOUNT_SID; 
    const authToken = process.env.TWILIO_AUTH_TOKEN;
    const twilioPhoneNumber = process.env.TWILIO_PHONE_NUMBER;

    if (!accountSid || !authToken || !twilioPhoneNumber) {
      console.error('Erro de configura√ß√£o da Twilio');
      return res.status(500).json({ message: 'Configura√ß√£o da Twilio ausente' });
    }

    const client = twilio(accountSid, authToken);

    // Recuperar metas salvas
    const goals = userGoals[phoneNumber] || { expenses: 0, commissions: 0, targetIncome: 0 };

    // Mensagem personalizada
    const body = `üöÄ Ol√°! Aqui est√° um resumo das suas metas:\n
    - Gastos Mensais: R$${goals.expenses}
    - Comiss√µes: ${goals.commissions}%
    - Rendimento Desejado: R$${goals.targetIncome}
    \nContinue focado e boa sorte! üí™`;

    // Envio da mensagem pelo Twilio
    try {
      const message = await client.messages.create({
        body,
        from: `whatsapp:+${twilioPhoneNumber.replace(/\D/g, '')}`,
        to: `whatsapp:+${formattedNumber}`,
      });

      console.log('Mensagem enviada com sucesso:', message.sid);
      return res.status(200).json({ message: 'Mensagem enviada!', sid: message.sid });

    } catch (sendError) {
      console.error('Erro ao enviar mensagem:', sendError);
      return res.status(500).json({ message: 'Erro ao enviar mensagem', error: sendError.message });
    }

  } catch (generalError) {
    console.error('Erro geral na API:', generalError);
    return res.status(500).json({ message: 'Erro interno do servidor', error: generalError.message });
  }
}
